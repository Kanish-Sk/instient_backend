const express = require("express");
const mysql = require("mysql2/promise");

const app = express();
const port = 3000;

class CustomError extends Error {
  constructor(message, statusCode) {
    super(message);
    this.statusCode = statusCode;
  }
}

const dbConfig = {
  host: "sql348.main-hosting.eu",
  user: "u841345258_MVCu",
  password: "Instient@2023",
  database: "u841345258_MVC",
  port: 3306,
};

const pool = mysql.createPool(dbConfig);

const getCustomers = async () => {
  const connection = await pool.getConnection();
  try {
    const results = await connection.query("SELECT * FROM customers");
    return results[0];
  } finally {
    connection.release();
  }
};

const getOrderByCustomer = async (customerId) => {
  const connection = await pool.getConnection();
  try {
    const results = await connection.query(
      "SELECT * FROM orders WHERE customer_id = ?",
      [customerId]
    );
    return results[0];
  } finally {
    connection.release();
  }
};

const getSummary = async () => {
  const connection = await pool.getConnection();
  try {
    const results = await connection.query(`
      SELECT
          c.name AS customer_name,
          COUNT(o.id) AS total_orders,
          SUM(o.amount) AS total_amount
      FROM
          customers c
      JOIN
          orders o ON c.id = o.customer_id
      GROUP BY
          c.country
      ORDER BY
          c.country
    `);
    return results[0];
  } finally {
    connection.release();
  }
};

app.get("/api/customers", async (req, res, next) => {
  try {
    const customers = await getCustomers();
    if (customers.length === 0) {
      throw new CustomError("No customers found", 404);
    } else {
      res.json(customers);
    }
  } catch (err) {
    next(err);
  }
});

app.get("/api/orders/:customerId", async (req, res, next) => {
  const customerId = req.params.customerId;
  try {
    const orders = await getOrderByCustomer(customerId);
    if (orders.length === 0) {
      throw new CustomError("No orders found for this customer", 404);
    } else {
      res.json(orders);
    }
  } catch (err) {
    next(err);
  }
});

app.get("/api/summary", async (req, res, next) => {
  try {
    const customerOrders = await getSummary();
    if (customerOrders.length === 0) {
      throw new CustomError("No data found", 404);
    } else {
      res.json(customerOrders);
    }
  } catch (err) {
    next(err);
  }
});

app.use((req, res, next) => {
  const error = new CustomError("Route not found", 404);
  next(error);
});

app.use((err, req, res, next) => {

  if (err instanceof CustomError) {
    res.status(err.statusCode).json({ error: err.message });
  } else {
    res.status(500).json({ error: "Internal Server Error" });
  }
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
